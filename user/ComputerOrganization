ComputerOrganization

#Notes glossary
To get started enter a title for your note above. When you’re ready to save
your note just use Vim’s :write or :update commands, a filename will be picked
automatically based on the title.

                                    * * *

The notes plug-in comes with self hosting documentation. To jump to these notes
position your cursor on the highlighted name and press ‘gf’ in normal mode:

 • Note taking syntax
 • Note taking commands

#MarkDown Syntax
• :digraphs — displays special character codes in vim
   ◦ to enter a character:
      1. insert mode
      2. <ctrl> K 
      3. <digraph keys>

   _COMMONLY USED EXAMPLES_
    X² → [number] S
    X₂ → [number] s
    ∪  → U )
    ∩  → ( U
    ∈  → ( -
    ∑  → + Z 
    Δ  → D *
    ≤  → = < 
    ≥  → > =
    ω  → w *
    ∆  → D E
    ф  → f =

http://www.alecjacobson.com/weblog/?p=443


   _more codes_
   http://www.alecjacobson.com/weblog/?p=443

      
#Class Notes

#Textbook Notes
##Chapter 1: Number Systems
   • *Hierarchy* - dividing a system into modules, then further sub-dividing until the pieces are easy to understand
   • *Modularity* - well-defined functions and interfaces, so that they connect together easily without unanticipated side effects.
   • *Regularity* - seeks uniformity among the modules. Common modules are reused many times, reducing the number of distinct modules that are designed.
###1.3 - Digital Abstraction
• Most physical variables are continuous (there are an infinite number of possible values).
• Digital systems represent information with *discrete variables* -- aka, there are a finite number of distinct values.
• The amount of information *D* in a discrete valued variable with *N* distinct states is measured in units of _bits_ as:
   ◦ D = log₂ N  bits
      ◦ Therefore; a binary variable conveys log₂2 = 1 bit of information
• *bit* is short for binary digit 
###1.4 - Number Systems
Decimal numbers:
• Decimal numbers(0 - 9) are what everyone is accustomed to.
• you can make a longer decimal number by appending digits together in the front. 

    6 
   66 the 6 in the “tens” place has 10x the value of the ones place.
• this is called base 10
• An *N*-digit decimal number represents one of 10^N possibilites.
   ◦ 0, 1, 2, 3, 4, ... (10^N -1)
Binary numbers:
• A bit can represent two possible values: 0 or 1
• Each column of a multi-digit binary number has twice the weight of the previous column
   ◦ binary numbers are base 2

1-bit binary numbers: 0  1
2-bit binary numbers: 00  01  10  11
3-bit binary numbers: 000  001  010  011  100  101  110  111
4-bit binary numbers: 0000  0001  0010  0011  0100  0101  0110  0111  1000  1001  1010  1011  1100  1101  1110  1111

• _Converting from decimal to binary:_ ‘work left to right!’
   17
   1) start from left, take largest power of 2 that is ≤ the number (in this case 16)
   2) 1 in 16’s column
   3) move right and check if number contains any subsequent powers of 2
   4) 0 in 8’s column
   5) 0 in 4’s column
   6) 0 in 2’s column
   7) 1 in 1’s column
   10001

   we needed that 5th digit because 4-bit binary only represents 16 values

Hexadecimal numbers: 
• writing long binary numbers becomes tedious and prone to errors.
• a group of four bits represents one of 2⁴ possibilites.
   ◦ therefore, it becomes more convenient to work in base 16 “hexadecimal”
      ◦ 0 1 2 3 4 5 6 7 8 9 A B C D E F
      ◦ 16 possible values can be represented by each digit in hex.
• _Converting from hex to decimal:_ ‘work right to left!’
   ◦ starting at the right, repeatedly divide by 16. the remainder goes in each column.
749₁₀
  256-column = 2
  16-column  = 14
  1-column   = 13

Bytes, Nibbles, Words:
• *Byte* - 8 bits.
   ◦ 1 Byte represents 2⁸ = 256 possibilities.
• *Nibble* - 4 bits
   ◦ 1 Nibble represents 2⁴ = 16 possibilities.

• 1 hex digit stores 1 nibble.
• 2 hex digits store 1 Byte.

• Microprocessors handle data in chunks called *words*.
   ◦ the size of a word depends on the specific processor.
   ◦ most processors these days handle 64-bit words. 

##Chapter 6: Architecture
###6.1: Introduction
• Instructions - the words in a computer’s language.
• Instruction set - the computer’s vocaulary
• Computers only understand 1’s and 0’s 
   ◦ Instructions are encoded as binary numbers in a format called machine language.

   MIPS Architecture:
   Design Principles
      1. simplicity favors regularity.
      2. make the common case fast.
      3. smaller is faster.
      4. good design demands good compromises.

###6.2: Assembly Language
• Assembly is the human-readable representation of the computer’s native language.
• An instruction operates on operands (think variables).
• Mips instruction operands:
   1. *registers* (small but fast)
   2. *memory*    (large but slow)
   3. *constants* (stored in the instruction itself)

   MIPS Register Set:
      ◦ $0     [ 0   ]  the constant value 0
      ◦ $at    [ 1   ]  assembler temporary
      ◦ $v0-1  [ 2-3 ]  function return value
      ◦ $a0-3  [ 4-7 ]  function args
      ◦ $t0-7  [ 8-15]  temporary variables
      ◦ $s0-7  [16-23]  saved variables
      ◦ $t8-9  [24-25]  temporary variables
      ◦ $k0-1  [26-27]  operating system temporaries
      ◦ $gp    [  28 ]  global pointer
      ◦ $sp    [  29 ]  stack pointer
      ◦ $fp    [  30 ]  frame pointer
      ◦ $ra    [  31 ]  function return address

   Memory:
      ◦ Organized as an array of data words.
      ◦ MIPS uses 32-bit memory addresses.
      ◦ MIPS uses 32-bit data words.
      ◦ MIPS uses the “load word” instruction ( lw ) to read a word from memory into a register.
      ◦ “store word” instruction ( sw ) writes a word from a register into memory.
      
###6.3: Machine Language
• Every instruction in MIPS is encoded as a 32-bit word.
• There are 3 instruction formats:
   ◦ R-Type: Register type
   ◦ i-Type: Immediate type
   ◦ J-Type: Jump type

   R-Type: “Register Type”
      ◦ operate on 3 registers
         ▸ 2 source registers
         ▸ 1 destination register
      ◦ has six fields:
         ▸ op - opcode = 0 ‘all R-Type have opcode of 0’ (6-bits)
         ▸ rs - source (5-bits)
         ▸ rt - source (5-bits)
         ▸ rd - destination (5-bits)
         ▸ shamt - shift amount (5-bits)
         ▸ funct - function type (6-bits)

   I-Type: “Immediate Type”
      ◦ operate on 2 registers
      ◦ 1 immediate
      ◦ has four fields:
         ▸ op - opcode (6-bits)
         ▸ rs - source (5-bits)
         ▸ rt - source (5-bits)
         ▸ imm - immediate value (16-bit)
            ▹ _important note_
            ▹ 16-bit immediate field is used in a 32-bit operation.
            ▹ upper half is all 0’s for positive imm.
            ▹ upper half is all 1’s for negative imm.
            ▹ this is called “sign extension with a two’s complement number”

   J-Type: “Jump Type”
      ◦ has two fields:
         ▸ op - opcode (6-bits)
         ▸ addr - address to jump to (26-bits)

Translating machine language to assembly:
   Steps to solve
      ◦ translate instruction into binary
      ◦ find the opcode (so you know how to interpret the rest of the bits)
      ◦ split up the bits accordingly
      ◦ translate to decimal

   1. 0x2237FFF1

       2    2    3    7    F    F    F    1 “hex values”
      0010 0010 0011 0111 1111 1111 1111 0001 “4-bit binary to get hex”

        op    rs    rt          imm
      001000 10001 10111 1111 1111 1111 0001 “
      
      op    rs    rt  imm 
      8     17    23  -15 “decimal values”

      addi $s7, $s1, -15 “assembly code”

   2. 0x02F34022

       0    2    F    3    4    0    2    2
      0000 0010 1111 0011 0100 0000 0010 0010

       op   
      000000 10111 10011010 0000 0000 100010
        0

###6.4: Arithmetic/Logic Instructions

AND/OR:
   • the *and* instruction is useful for masking bits (forcing bits to 0)
      ◦ 0xFFFF0000 AND 0x46A1F0B7 = 0x46A10000
            ▸ see how the bottom 4 bits get zero’d out?
   • the *or* instruction can combine bits from two registers.
      ◦ 0x347A0000 OR 0x000072FC = 0x347A72FC

SHIFT:
   • shift the value in a register left of right by up to 31 bits.
   • shift multiplies or divides by powers of 2.

MULTIPLY/DIVIDE:
   • multiplying two 32-bit numbers gives you a 64-bit product.
   • dividing two 32-bit numbers gives you a 32-bit quotient and a 32-bit remainder.
   • MIPS places these two values in *hi* and *lo*
   • for mult: the most significant bits in hi and the least in lo.
   • for div: the remainder in hi and the quotient in lo.

FUNCTION CALLS:
   • Arguments = inputs
   • Return Value = output
   • Functions should calculate the return value and do nothing else.
   • When one function calls another, the caller, and the callee must agree on where to put the arguments and the return value.
   • In MIPS, the caller places up to four arguments in registers $a0-$a3 before making the function call.
   • The callee places the return value in registers $v0-$v1.
   • The callee can’t mess with the registers being used by the caller.
   • The callee must know where to return to after it completes.
   • The caller stores the return address in $ra when it uses the jal instruction.
   • The callee must leave the saved registers ($s0-$s7), $ra, and the stack unmodified.

   # $s0 = y
   main: 
      ...
      addi $a0, $0, 2 #argument0=2
      addi $a1, $0, 3 #argument1=3  
      addi $a2, $0, 4 #argument2=4
      addi $a3, $0, 5 #argument3=5
      jal diffofsums # call function
      add $s0, $v0, $0 # y = returned value
      ...
   # $s0 = result 
   diffofsums:
      add$t0,$a0,$a1 #$t0=f+g
      add$t1,$a2,$a3 #$t1=h + i
      sub$s0,$t0,$t1 #result=(f+g)−(h+i) 
      add $v0, $s0, $0 # put return value in $v0
      jr $ra # return to caller
   
The Stack:
   • Used to save local variables within a function.
   • Stacks are LIFO “Last in - first out” ‘Stack of dishes’
   • A function may allocate space on the stack but it must deallocate it before returning.
   • MIPS stack grows *down* in memory.
   • The *STACK POINTER* ($sp) points to the top of the stack.
   • Remember that a function shouldn’t fuck with any of the registers other than the return regs.
   • To avoid the problem of overwriting registers while within a function:
      1. Make space on the stack to store the values of one or more registers.
      2. Store the values of the registers on the stack.
      3. Execute the function using the registers.
      4. Restore the original values of the registers from the stack.
      5. Deallocate space on the stack.
   • The stack space that a function allocates for itself is called its *STACK FRAME*.
   • Each function should access only its own stack frame, not the frames belonging to other functions.

###6.5: Addressing Modes
   • MIPS uses five addressing modes:
      1. register-only
      2. immediate
      3. base
      4. PC-relative
      5. pseudo-direct
         
         ▸ 1-3 define modes of reading and writing operands.
         ▸ 4-5 writing the program counter (*PC*).
   
###6.6: Compiling, Assembling, and Loading
   How to compile and assemble a complete high-level program and how to load the program into memory for execution.
Memory Map:
   Where code, data, and stack memory are located.
   • With 32-bit addresses, the MIPS *address space* spans 2³² bytes (4GB).
   • MIPS divides the address space into four segments.
      1. Text
      2. Global Data
      3. Dynamic Data
      4. Reserved
   

###6.9: Summary
   • MIPS uses 32-bit words.
   • MIPS has 32 registers.
   • Look at visual of MIPS memory map.

##Chapter 2: Combinational Logic Design
   Combinational logic gives an output that is a function of the current inputs. This reading will take you through boolean equations and algebraic rules for rewriting expressions. Then it will show you the logic gate notation for boolean expressions.
###2.1: Introduction
   • A *CIRCUIT* is a network that processes discrete-valued variables.
   • Circuits can be viewed as a black box with:
      ◦ one or more discrete-valued input terminals.
      ◦ one or more discrete-valued output terminals.
      ◦ a *functional specification* describing the relationship between inputs and outputs.
      ◦ a *timing specification* describing the delay between inputs changing and outputs responding.
   • Looking inside the black box of a circuit:
      ◦ composed of nodes and elements.
         ▸ node: a wire whose voltage conveys a discrete-valued variable.
            ▹ input: receive values from the external world.
            ▹ output: deliver values to the external world.
            ▹ internal: remain within the scope of the circuit.
         ▸ element: a circuit itself.

###2.2: Boolean Equations
TRUE or FALSE
   
• The *complement* of a variable A is its inverse ~A.
• The variable or its complement are both *LITERALS*.

AND/OR: 
   • The AND of one or more literals is called a *product*.
   • A *MINTERM* is a product involving all of the inputs to the function.

   • The OR of one or more literals is called a *sum*.
   • A *MAXTERM* is a sum involving all of the inputs to the function.

• The order of operations is important when interpreting Boolean equations.
   1. NOT (~)
   2. AND (*)
   3. OR  (+)
   
   ◦ Y = A + BC 
   ◦ Y = A or (B and C)




###2.3: Boolean Algebra
Simplify boolean equations with algebra.
Axioms of boolean algebra:
   B=0 if B!=1    B=1 if B!=0    “Binary Field”
   ~0=1           ~1=0           “NOT”
   0 * 0=0        1+1=1          “AND/OR”
   1 * 1=1        0+0=0          “AND/OR”
   0 * 1=1 * 0=0     1+0=0+1=1   “AND/OR”

Theorems of one variable:
   T1: B * 1 = B    T1’: B + 0 = B    “Identity”
   T2: B * 0 = 0    T2’: B + 1 = 1    “Null Element”
   T3: B * B = B    T3’: B + B = B    “Idempotency”
   T4: ~ B = B                        “Involution”
   T5: B * ~B = 0   T5’: B + ~B = 1   “Complements”

   • Example:
      (~A ~B ~C) + (A ~B ~C) + (A ~B C)
      1. ~B ~C (~A + A) + (A ~B C) ‘Distributivity’
      2. ~B ~C (1) + (A ~B C)      ‘Complements’
      3. (~B ~C) + (A ~B C)        ‘Identity’

###2.4: From Logic to Gates
A schematic is a diagram of a digital circuit showing the elements and the wires that connect them together.
• See textbook for more info on how to draw circuits diagrams!

###2.5: Multilevel Combinational Logic
• Logic in sum-of-products form is called two-level logic because it consists of literals connected to a level of AND gates connected to a level of OR gates.
• Designers often build circuits with more than two levels of logic gates. These multilevel combinational circuits may use less hardware than their two-level counterparts. Bubble pushing is especially helpful in ana- lyzing and designing multilevel circuits.

###2.6: X’s And Z’s, OH MY
   Boolean algebra is limited to 0’s and 1’s. However, real circuits can also
have illegal and floating values, represented symbolically by X and Z.

Illegal Value X:
   The symbol X indicates that the circuit node has an unknown or illegal value.

• When a node is driven to both 0 and 1 at the same time we get an error. 
   ◦ this is called *CONTENTION*.
• X values are also used by circuit simulators to indicate an uninitialized value. 
   ◦ For example: if you forget to specify the value of an input, the simulator may assume it is an X to warn you of the problem.
• The symbol X is used in truth tables to indicate a “don’t care” value.
   ◦ Be sure not to mix up the two meanings:
      ◦ In a truth table, X represents an unimportant value.
      ◦ In a circuit, X represents an unknown or illegal value.

Floating Value Z:
   The symbol Z indicates that a node is being driven neither HIGH nor LOW. The node is said to be floating, high impedance, or high Z. A typi- cal misconception is that a floating or undriven node is the same as a logic 0. In reality, a floating node might be 0, might be 1, or might be at some voltage in between, depending on the history of the system. A floating node does not always mean there is an error in the circuit, so long as some other circuit element does drive the node to a valid logic level when the value of the node is relevant to circuit operation.




###2.8: Combinational Building Blocks
   Combinational logic is often grouped into larger building blocks to build more complex systems. This is an application of the principle of abstrac- tion, hiding the unnecessary gate-level details to emphasize the function of the building block.

##Chapter 5: Digital Building Blocks
###5.1: Introduction
   Up to this point, we have examined the design of combinational and sequential circuits using Boolean equations, schematics, and HDLs. This chapter introduces more elaborate combinational and sequential building blocks used in digital systems. These blocks include arithmetic circuits, counters, shift registers, memory arrays, and logic arrays. These building blocks are not only useful in their own right, but they also demonstrate the principles of hierarchy, modularity, and regularity. The building blocks are hierarchically assembled from simpler components such as logic gates, multiplexers, and decoders. Each building block has a well- defined interface and can be treated as a black box when the underlying implementation is unimportant. The regular structure of each building block is easily extended to different sizes.

###5.2-5.2.2: Arithmetic Circuits
Addition:
   1. How to add two 1-bit binary numbers.
   2. How to add N-bit binary numbers.

   Half Adder:
      • 1-bit addition
      • For Example:
         ▸ two inputs: A=1, B=1
         ▸ two outputs: S and Cout
            ▹ S = sum of A and B
            ▹ Cout is carried in to the next most significant bit.
         ▸ since A+B = 2, S can’t hold a number that high so we use Cout to carry over that next bit.
         A   B   Cout S
         0   0    0   0
         0   1    0   1
         1   0    0   1
         1   1    1   0

   Full Adder:
      • N-bit addition
      • For Example:
         ▸ three inputs: A=1, B=1
         ▸ two outputs: S and Cout
            ▹ S = sum of A and B
            ▹ Cout is carried in to the next most significant bit.
         ▸ since A+B = 2, S can’t hold a number that high so we use Cout to carry over that next bit.
         Cin A   B   Cout S
         0   0   0    0   0
         0   0   1    0   1
         0   1   0    0   1
         0   1   1    1   0
         1   0   0    0   1
         1   0   1    1   0
         1   1   0    1   0
         1   1   1    1   1
###5.2.5-5.2.6: Shifters, Rotators, and Multiplication
   Shifters and rotators move bits and multiply or divide by powers of 2. As the name implies, a shifter shifts a binary number left or right by a specified number of positions. 

Kinds of shifters:
   ◦ Logical Shifter: shifts the number to the left (LSL) or right (LSR) and fills empty spots with 0’s.
   ◦ Arithmetic Shifter: same as logical, but on right shifts they fill the most significant bits with a copy of the old most significant bit. This is useful for multiplying and dividing signed numbers.
   ◦ Rotator: rotates number in circle such that empty spots are filled with bits shifted off the other end.

• A left shift is a special case of multiplication. A left shift by N bits multiplies the number by 2^N
• A right shift is a special case of division. A right shift by N bits divides the number by 2^N

Multiplication:
• Multiplication of unsigned binary numbers is similar to decimal multipli• cation but involves only 1’s and 0’s.
• In both cases, partial products are formed by mul- tiplying a single digit of the multiplier with the entire multiplicand. The shifted partial products are summed to form the result.
• In general, an N×N multiplier multiplies two N-bit numbers and produces a 2N-bit result.
• Multiplication of 1-bit binary num- bers is equivalent to the AND operation, so AND gates are used to form the partial products.
• With N-bit operands, there are N partial products and N − 1 stages of 1-bit adders.

###TODO:
   • Ch 5.2 don’t really understand:
      ◦ half adder
      ◦ full adder
      ◦ carry propagate adders:
         ▸ ripple-carry
         ▸ carry-lookahead
         ▸ prefix adders








